{"version":3,"sources":["pictures-test.js"],"names":["t","id","v4","srv","url","body","json","deepEqual","todo"],"mappings":"AAAA;;AAEA;;;;AACA;;;;AACA;;;;AAEA;;;;AAEA;;;;AACA;;;;;;;AAJA;;AAEA;;;AAIA,mBAAK,UAAL;AAAA,+BAAiB,WAAMA,CAAN,EAAW;AAC1B,QAAIC,KAAK,mBAAKC,EAAL,EAAT;AACA;AACA;AACA,QAAIC,MAAM,wCAAV;;AAEA;AACA,QAAIC,MAAM,MAAM,0BAAOD,GAAP,CAAhB;AACA;AACA,QAAIE,OAAO,MAAM,8BAAQ,EAAED,KAAM,GAAEA,GAAI,IAAGH,EAAG,EAApB,EAAuBK,MAAM,IAA7B,EAAR,CAAjB;AACAN,MAAEO,SAAF,CAAYF,IAAZ,EAAkB,EAAEJ,EAAF,EAAlB;AACD,GAXD;;AAAA;AAAA;AAAA;AAAA;;AAaA;AACA,cAAKO,IAAL,CAAU,QAAV;AACA,cAAKA,IAAL,CAAU,gBAAV","file":"pictures-test.js","sourcesContent":["'use strict'\n\nimport test from 'ava'\nimport uuid from 'uuid-base62'\nimport micro from 'micro'\n// test-listen herramineta para probar microessevicionsc on micro\nimport listen from 'test-listen'\n// request promise modulo que me permite hacer http con promesas\nimport request from 'request-promise'\nimport pictures from '../pictures'\n\ntest('GET /:id', async t => {\n  let id = uuid.v4()\n  // con micro creamos un servidor para el test\n  // hace una respuesta completamente asincrona que hay que resolver con async await\n  let srv = micro(pictures)\n\n  // con listen retorna una url con el server y el puerto\n  let url = await listen(srv)\n  // con request obtenemos la respuesta\n  let body = await request({ url: `${url}/${id}`, json: true })\n  t.deepEqual(body, { id })\n})\n\n// con .TODO nos permite declarar la prueba sin necesidad de terner que implementarla\ntest.todo('POST /')\ntest.todo('POST /:id/like')\n"]}