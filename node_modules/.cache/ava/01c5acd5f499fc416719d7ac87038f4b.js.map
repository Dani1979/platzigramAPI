{"version":3,"sources":["pictures-test.js"],"names":["t","id","v4","srv","req","res","url","body","json","deepEqual"],"mappings":"AAAA;;AAEA;;;;AACA;;;;AACA;;;;AAEA;;;;AAEA;;;;;;;AAHA;;AAEA;;;AAIC,mBAAK,UAAL;AAAA,+BAAiB,WAAMA,CAAN,EAAW;AAC1B,QAAIC,KAAK,mBAAKC,EAAL,EAAT;AACA,QAAIC,MAAM;AAAA,oCAAM,WAAOC,GAAP,EAAYC,GAAZ,EAAoB;AAClC,yBAAKA,GAAL,EAAU,GAAV,EAAe,EAAEJ,IAAIA,EAAN,EAAf;AACD,OAFS;;AAAA;AAAA;AAAA;AAAA,SAAV;;AAIA,QAAIK,MAAM,MAAM,0BAAOH,GAAP,CAAhB;AACA,QAAII,OAAO,MAAM,8BAAQ,EAAED,KAAKA,GAAP,EAAYE,MAAM,IAAlB,EAAR,CAAjB;AACAR,MAAES,SAAF,CAAYF,IAAZ,EAAkB,EAAEN,EAAF,EAAlB;AACD,GATD;;AAAA;AAAA;AAAA;AAAA;;AAWD;AACC;AACA","file":"pictures-test.js","sourcesContent":["'use strict'\n\nimport test from 'ava'\nimport micro, {send} from 'micro'\nimport uuid from 'uuid-base62'\n//test-listen herramineta para probar microessevicionsc on micro\nimport listen from 'test-listen'\n//request promise modulo que me permite hacer http con promesas\nimport request from 'request-promise'\n\n\n test('GET /:id', async t => {\n   let id = uuid.v4()\n   let srv = micro(async (req, res) => {\n     send(res, 200, { id: id })\n   })\n\n   let url = await listen(srv)\n   let body = await request({ url: url, json: true })\n   t.deepEqual(body, { id })\n })\n\n// con .TODO nos permite declarar la prueba sin necesidad de terner que implementarla\n // test.todo('POST /')\n // test.todo('POST /:id/like')\n"]}